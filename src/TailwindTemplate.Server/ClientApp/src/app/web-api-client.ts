//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICommitsClient {
    getLastCommit(command: GetLastCommitQuery): Observable<Commit>;
    getCommits(command: GetCommitsQuery): Observable<Commit[]>;
    getChanges(repoName: string, revision: number): Observable<CommitChange[]>;
    getCommit(repoName: string, revision: number): Observable<Commit>;
}

@Injectable({
    providedIn: 'root'
})
export class CommitsClient implements ICommitsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getLastCommit(command: GetLastCommitQuery): Observable<Commit> {
        let url_ = this.baseUrl + "/api/Commits/last";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLastCommit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLastCommit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Commit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Commit>;
        }));
    }

    protected processGetLastCommit(response: HttpResponseBase): Observable<Commit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Commit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getCommits(command: GetCommitsQuery): Observable<Commit[]> {
        let url_ = this.baseUrl + "/api/Commits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCommits(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCommits(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Commit[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Commit[]>;
        }));
    }

    protected processGetCommits(response: HttpResponseBase): Observable<Commit[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Commit.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getChanges(repoName: string, revision: number): Observable<CommitChange[]> {
        let url_ = this.baseUrl + "/api/Commits/changes/{repoName}/{revision}";
        if (repoName === undefined || repoName === null)
            throw new Error("The parameter 'repoName' must be defined.");
        url_ = url_.replace("{repoName}", encodeURIComponent("" + repoName));
        if (revision === undefined || revision === null)
            throw new Error("The parameter 'revision' must be defined.");
        url_ = url_.replace("{revision}", encodeURIComponent("" + revision));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetChanges(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetChanges(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommitChange[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommitChange[]>;
        }));
    }

    protected processGetChanges(response: HttpResponseBase): Observable<CommitChange[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CommitChange.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getCommit(repoName: string, revision: number): Observable<Commit> {
        let url_ = this.baseUrl + "/api/Commits/{repoName}/{revision}";
        if (repoName === undefined || repoName === null)
            throw new Error("The parameter 'repoName' must be defined.");
        url_ = url_.replace("{repoName}", encodeURIComponent("" + repoName));
        if (revision === undefined || revision === null)
            throw new Error("The parameter 'revision' must be defined.");
        url_ = url_.replace("{revision}", encodeURIComponent("" + revision));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCommit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCommit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Commit>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Commit>;
        }));
    }

    protected processGetCommit(response: HttpResponseBase): Observable<Commit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Commit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IFilesClient {
    getFileContent(command: GetFileQuery): Observable<RepoFile>;
}

@Injectable({
    providedIn: 'root'
})
export class FilesClient implements IFilesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getFileContent(command: GetFileQuery): Observable<RepoFile> {
        let url_ = this.baseUrl + "/api/Files/file";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFileContent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFileContent(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RepoFile>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RepoFile>;
        }));
    }

    protected processGetFileContent(response: HttpResponseBase): Observable<RepoFile> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RepoFile.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IPublishClient {
    getProfiles(command: GetProfilesQuery): Observable<string[]>;
    beginPublish(command: PublishCommand): Observable<boolean>;
}

@Injectable({
    providedIn: 'root'
})
export class PublishClient implements IPublishClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getProfiles(command: GetProfilesQuery): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Publish/profiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProfiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProfiles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processGetProfiles(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    beginPublish(command: PublishCommand): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Publish/start";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBeginPublish(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBeginPublish(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processBeginPublish(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IRepositoriesClient {
    getRepositories(): Observable<string[]>;
    getBranches(repoName: string): Observable<Branch[]>;
    getTags(repoName: string): Observable<Branch[]>;
    getItems(command: GetItemsQuery): Observable<RepoItem[]>;
    getSvnUrl(command: GetFullPathQuery): Observable<string>;
    getRepoInfo(command: GetRepoInfoQuery): Observable<RepoInfo>;
}

@Injectable({
    providedIn: 'root'
})
export class RepositoriesClient implements IRepositoriesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getRepositories(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Repositories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRepositories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRepositories(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processGetRepositories(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getBranches(repoName: string): Observable<Branch[]> {
        let url_ = this.baseUrl + "/api/Repositories/branches/{repoName}";
        if (repoName === undefined || repoName === null)
            throw new Error("The parameter 'repoName' must be defined.");
        url_ = url_.replace("{repoName}", encodeURIComponent("" + repoName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBranches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBranches(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Branch[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Branch[]>;
        }));
    }

    protected processGetBranches(response: HttpResponseBase): Observable<Branch[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Branch.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTags(repoName: string): Observable<Branch[]> {
        let url_ = this.baseUrl + "/api/Repositories/tags/{repoName}";
        if (repoName === undefined || repoName === null)
            throw new Error("The parameter 'repoName' must be defined.");
        url_ = url_.replace("{repoName}", encodeURIComponent("" + repoName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTags(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTags(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Branch[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Branch[]>;
        }));
    }

    protected processGetTags(response: HttpResponseBase): Observable<Branch[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Branch.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getItems(command: GetItemsQuery): Observable<RepoItem[]> {
        let url_ = this.baseUrl + "/api/Repositories/items";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RepoItem[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RepoItem[]>;
        }));
    }

    protected processGetItems(response: HttpResponseBase): Observable<RepoItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RepoItem.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSvnUrl(command: GetFullPathQuery): Observable<string> {
        let url_ = this.baseUrl + "/api/Repositories/path";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSvnUrl(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSvnUrl(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processGetSvnUrl(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getRepoInfo(command: GetRepoInfoQuery): Observable<RepoInfo> {
        let url_ = this.baseUrl + "/api/Repositories/info";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRepoInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRepoInfo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RepoInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RepoInfo>;
        }));
    }

    protected processGetRepoInfo(response: HttpResponseBase): Observable<RepoInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RepoInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class Commit implements ICommit {
    revision?: number;
    author?: string;
    message?: string;
    date?: Date;

    constructor(data?: ICommit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.revision = _data["revision"];
            this.author = _data["author"];
            this.message = _data["message"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Commit {
        data = typeof data === 'object' ? data : {};
        let result = new Commit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["revision"] = this.revision;
        data["author"] = this.author;
        data["message"] = this.message;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICommit {
    revision?: number;
    author?: string;
    message?: string;
    date?: Date;
}

export class GetLastCommitQuery implements IGetLastCommitQuery {
    repoName?: string;
    path?: string;

    constructor(data?: IGetLastCommitQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repoName = _data["repoName"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): GetLastCommitQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetLastCommitQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repoName"] = this.repoName;
        data["path"] = this.path;
        return data;
    }
}

export interface IGetLastCommitQuery {
    repoName?: string;
    path?: string;
}

export class GetCommitsQuery implements IGetCommitsQuery {
    app?: string;
    url?: string;
    page?: number;

    constructor(data?: IGetCommitsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.app = _data["app"];
            this.url = _data["url"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): GetCommitsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetCommitsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["app"] = this.app;
        data["url"] = this.url;
        data["page"] = this.page;
        return data;
    }
}

export interface IGetCommitsQuery {
    app?: string;
    url?: string;
    page?: number;
}

export class CommitChange implements ICommitChange {
    action?: string;
    oldContent?: string;
    newContent?: string;
    file?: string;
    type?: RepoItemType;

    constructor(data?: ICommitChange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.action = _data["action"];
            this.oldContent = _data["oldContent"];
            this.newContent = _data["newContent"];
            this.file = _data["file"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CommitChange {
        data = typeof data === 'object' ? data : {};
        let result = new CommitChange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["action"] = this.action;
        data["oldContent"] = this.oldContent;
        data["newContent"] = this.newContent;
        data["file"] = this.file;
        data["type"] = this.type;
        return data;
    }
}

export interface ICommitChange {
    action?: string;
    oldContent?: string;
    newContent?: string;
    file?: string;
    type?: RepoItemType;
}

export enum RepoItemType {
    File = 0,
    Folder = 1,
}

export class RepoFile implements IRepoFile {
    content?: string;
    isBinary?: boolean;
    lastCommit?: Commit;

    constructor(data?: IRepoFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.content = _data["content"];
            this.isBinary = _data["isBinary"];
            this.lastCommit = _data["lastCommit"] ? Commit.fromJS(_data["lastCommit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepoFile {
        data = typeof data === 'object' ? data : {};
        let result = new RepoFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["isBinary"] = this.isBinary;
        data["lastCommit"] = this.lastCommit ? this.lastCommit.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRepoFile {
    content?: string;
    isBinary?: boolean;
    lastCommit?: Commit;
}

export class GetFileQuery implements IGetFileQuery {
    repoName?: string;
    path?: string;

    constructor(data?: IGetFileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repoName = _data["repoName"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): GetFileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetFileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repoName"] = this.repoName;
        data["path"] = this.path;
        return data;
    }
}

export interface IGetFileQuery {
    repoName?: string;
    path?: string;
}

export class GetProfilesQuery implements IGetProfilesQuery {
    repoName?: string;
    path?: string;
    projectName?: string;

    constructor(data?: IGetProfilesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repoName = _data["repoName"];
            this.path = _data["path"];
            this.projectName = _data["projectName"];
        }
    }

    static fromJS(data: any): GetProfilesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetProfilesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repoName"] = this.repoName;
        data["path"] = this.path;
        data["projectName"] = this.projectName;
        return data;
    }
}

export interface IGetProfilesQuery {
    repoName?: string;
    path?: string;
    projectName?: string;
}

export class PublishCommand implements IPublishCommand {
    repoName?: string;
    path?: string;

    constructor(data?: IPublishCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repoName = _data["repoName"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): PublishCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PublishCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repoName"] = this.repoName;
        data["path"] = this.path;
        return data;
    }
}

export interface IPublishCommand {
    repoName?: string;
    path?: string;
}

export class Branch implements IBranch {
    title?: string;
    url?: string;

    constructor(data?: IBranch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Branch {
        data = typeof data === 'object' ? data : {};
        let result = new Branch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["url"] = this.url;
        return data;
    }
}

export interface IBranch {
    title?: string;
    url?: string;
}

export class RepoItem implements IRepoItem {
    name?: string;
    type?: RepoItemType;
    lastCommit?: Commit;

    constructor(data?: IRepoItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.lastCommit = _data["lastCommit"] ? Commit.fromJS(_data["lastCommit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepoItem {
        data = typeof data === 'object' ? data : {};
        let result = new RepoItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["lastCommit"] = this.lastCommit ? this.lastCommit.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRepoItem {
    name?: string;
    type?: RepoItemType;
    lastCommit?: Commit;
}

export class GetItemsQuery implements IGetItemsQuery {
    repoName?: string;
    path?: string;

    constructor(data?: IGetItemsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repoName = _data["repoName"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): GetItemsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetItemsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repoName"] = this.repoName;
        data["path"] = this.path;
        return data;
    }
}

export interface IGetItemsQuery {
    repoName?: string;
    path?: string;
}

export class GetFullPathQuery implements IGetFullPathQuery {
    repoName?: string;
    path?: string;

    constructor(data?: IGetFullPathQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repoName = _data["repoName"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): GetFullPathQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetFullPathQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repoName"] = this.repoName;
        data["path"] = this.path;
        return data;
    }
}

export interface IGetFullPathQuery {
    repoName?: string;
    path?: string;
}

export class RepoInfo implements IRepoInfo {
    commitsCount?: number;
    authors?: string[];
    svnUrl?: string;
    dateCreate?: Date;

    constructor(data?: IRepoInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.commitsCount = _data["commitsCount"];
            if (Array.isArray(_data["authors"])) {
                this.authors = [] as any;
                for (let item of _data["authors"])
                    this.authors!.push(item);
            }
            this.svnUrl = _data["svnUrl"];
            this.dateCreate = _data["dateCreate"] ? new Date(_data["dateCreate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepoInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RepoInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commitsCount"] = this.commitsCount;
        if (Array.isArray(this.authors)) {
            data["authors"] = [];
            for (let item of this.authors)
                data["authors"].push(item);
        }
        data["svnUrl"] = this.svnUrl;
        data["dateCreate"] = this.dateCreate ? this.dateCreate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRepoInfo {
    commitsCount?: number;
    authors?: string[];
    svnUrl?: string;
    dateCreate?: Date;
}

export class GetRepoInfoQuery implements IGetRepoInfoQuery {
    repoName?: string;
    branch?: string;

    constructor(data?: IGetRepoInfoQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repoName = _data["repoName"];
            this.branch = _data["branch"];
        }
    }

    static fromJS(data: any): GetRepoInfoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRepoInfoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repoName"] = this.repoName;
        data["branch"] = this.branch;
        return data;
    }
}

export interface IGetRepoInfoQuery {
    repoName?: string;
    branch?: string;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}