@use "sass:map";
@use '@angular/material' as mat;
@use "user-themes" as userThemes;

/* Базовые цвета для светлой темы */
$light-base: (
  foreground: (
    base: #000000,
    divider: #e5e5e5,
    dividers: #e5e5e5,
    disabled: #a3a3a3,
    disabled-button: #a3a3a3,
    disabled-text: #a3a3a3,
    elevation: #000000,
    hint-text: #a3a3a3,
    secondary-text: #737373,
    icon: #737373,
    icons: #737373,
    mat-icon: #737373,
    text: #262626,
    slider-min: #262626,
    slider-off: #d4d4d4,
    slider-off-active: #a3a3a3
  ),
  background: (
    status-bar: #d4d4d4,
    app-bar: #FFFFFF,
    background: #f5f5f5,
    hover: rgba(163, 163, 163, 0.12),
    card: #FFFFFF,
    dialog: #FFFFFF,
    disabled-button: rgba(163, 163, 163, 0.38),
    raised-button: #FFFFFF,
    focused-button: #737373,
    selected-button: #e5e5e5,
    selected-disabled-button: #e5e5e5,
    disabled-button-toggle: #d4d4d4,
    unselected-chip: #e5e5e5,
    disabled-list-option: #d4d4d4,
    tooltip: #262626
  )
);

/* Базовые цвета для темной темы */
$dark-base: (
  foreground: (
    base: #FFFFFF,
    divider: rgba(245, 245, 245, 0.12),
    dividers: rgba(245, 245, 245, 0.12),
    disabled: #475569,
    disabled-button: #262626,
    disabled-text: #475569,
    elevation: #000000,
    hint-text: #737373,
    secondary-text: #a3a3a3,
    icon: #f5f5f5,
    icons: #f5f5f5,
    mat-icon: #a3a3a3,
    text: #FFFFFF,
    slider-min: #FFFFFF,
    slider-off: #737373,
    slider-off-active: #a3a3a3
  ),
  background: (
    status-bar: #171717,
    app-bar: #171717,
    background: #171717,
    hover: rgba(255, 255, 255, 0.05),
    card: #262626,
    dialog: #262626,
    disabled-button: rgba(15, 23, 42, 0.38),
    raised-button: #171717,
    focused-button: #e5e5e5,
    selected-button: rgba(255, 255, 255, 0.05),
    selected-disabled-button: #262626,
    disabled-button-toggle: #171717,
    unselected-chip: #475569,
    disabled-list-option: #e5e5e5,
    tooltip: #737373
  )
);

/* Включаем основные стили Angular Material */
@include mat.core();

/* Устанавливаем типографию */
@include mat.all-component-themes((
  color: null,
  density: 0,
  typography: mat.m2-define-typography-config(
    $font-family: theme('fontFamily.sans'),
    $headline-1: mat.m2-define-typography-level(1.875rem, 2.25rem, 800, theme('fontFamily.sans')),
    $headline-2: mat.m2-define-typography-level(1.25rem, 1.75rem, 700, theme('fontFamily.sans')),
    $headline-3: mat.m2-define-typography-level(1.125rem, 1.75rem, 600, theme('fontFamily.sans')),
    $headline-4: mat.m2-define-typography-level(0.875rem, 1.25rem, 600, theme('fontFamily.sans')),
    $headline-5: mat.m2-define-typography-level(0.875rem, 1.5rem, 400, theme('fontFamily.sans')),
    $headline-6: mat.m2-define-typography-level(0.875rem, 1.5rem, 400, theme('fontFamily.sans')),
    $subtitle-1: mat.m2-define-typography-level(1rem, 1.75rem, 400, theme('fontFamily.sans')),
    $subtitle-2: mat.m2-define-typography-level(0.875rem, 1.25rem, 600, theme('fontFamily.sans')),
    $body-1: mat.m2-define-typography-level(0.875rem, 1.5rem, 400, theme('fontFamily.sans')),
    $body-2: mat.m2-define-typography-level(0.875rem, 1.5rem, 400, theme('fontFamily.sans')),
    $caption: mat.m2-define-typography-level(0.75rem, 1rem, 400, theme('fontFamily.sans')),
    $button: mat.m2-define-typography-level(0.875rem, 0.875rem, 500, theme('fontFamily.sans')),
    $overline: mat.m2-define-typography-level(0.75rem, 2rem, 500, theme('fontFamily.sans'))
  )
));

/* Перебираем темы и создаем темы Material */
@each $name, $theme in userThemes.$user-themes {

  /* Генерация палитр */
  $palettes: ();
  @each $name in (primary, accent, warn) {

    /*Определям тему Material */
    $palette: mat.m2-define-palette(map.get($theme, $name));

    /* Заменяем цвета по умолчанию для палитры Material */
    $palette: map.merge($palette, (
      default: map.get(map.get($theme, $name), DEFAULT),
      lighter: map.get(map.get($theme, $name), 100),
      darker: map.get(map.get($theme, $name), 700),
      text: map.get(map.get($theme, $name), DEFAULT),
      default-contrast: map.get(map.get(map.get($theme, $name), contrast), DEFAULT),
      lighter-contrast: map.get(map.get(map.get($theme, $name), contrast), 100),
      darker-contrast: map.get(map.get(map.get($theme, $name), contrast), 700)
    ));

    $palettes: map.merge($palettes, (#{$name}: $palette));
  }

  /* Создаем светлую и темную темы */
  $light-theme: mat.m2-define-light-theme((
    color: $palettes
  ));

  $dark-theme: mat.m2-define-dark-theme((
    color: $palettes
  ));

  /* Объеденяем созданные темы с базовыми цветами */
  $light-theme-colors: map.merge(map.get($light-theme, color), $light-base);
  $light-theme: map.merge(
      (color: $light-theme-colors),
      $light-theme-colors
  );

  $dark-theme-colors: map.merge(map.get($dark-theme, color), $dark-base);
  $dark-theme: map.merge(
      (color: $dark-theme-colors),
      $dark-theme-colors
  );

  /* Генерация и инкапсуляция тем Angular Material */
  #{map.get($theme, selector)} .light,
  #{map.get($theme, selector)}.light {
    @include mat.all-component-colors($light-theme);
  }

  #{map.get($theme, selector)} .dark,
  #{map.get($theme, selector)}.dark {
    @include mat.all-component-colors($dark-theme);
  }
}
